#pragma kernel CSMain
#include "Noise.compute"

RWStructuredBuffer<float4> DataBuffer;
RWStructuredBuffer<float3> offsets;

float Bound;
float Spacing;
float3 StartPosition;
int PointsPerAxis;

float3 offset;
int octaves;
float lacunarity;
float persistence;
float noiseScale;
float noiseWeight;
float floorOffset;
float weightMultiplier;
float hardFloor;
float hardFloorWeight;

float4 params;

int GetIndexFromCoordinate( uint x , uint y , uint z )
{
    return z*PointsPerAxis*PointsPerAxis + y*PointsPerAxis+x;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if( id.x >= PointsPerAxis || id.y >= PointsPerAxis || id.z >= PointsPerAxis )
    {
        return;
    }
    
    float3 pos = StartPosition + id * Spacing - Bound/2;
    float offsetNoise = 0;

    float noise = 0;

    float frequency = noiseScale/100;
    float amplitude = 1;
    float weight = 1;
    for (int j =0; j < octaves; j ++) {
        float n = snoise((pos+offsetNoise) * frequency + offsets[j] + offset);
        float v = 1-abs(n);
        v = v*v;
        v *= weight;
        weight = max(min(v*weightMultiplier,1),0);
        noise += v * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    
    float finalVal = -(pos.y + floorOffset) + noise * noiseWeight + (pos.y%params.x) * params.y ;

    if (pos.y < hardFloor) 
    {
        finalVal += hardFloorWeight;
    }
    
    int index = GetIndexFromCoordinate(id.x,id.y,id.z);
    DataBuffer[index] = float4(pos, finalVal);
}
