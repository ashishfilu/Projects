// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "MarchTables.compute"

struct Triangle
{
    float3 Vertex1,Vertex2,Vertex3;
};

AppendStructuredBuffer<Triangle> Triangles;
RWStructuredBuffer<float4> Points;

int PointsPerAxis;
float isoLevel;

int GetIndexFromCoordinate( uint x , uint y , uint z )
{
    return z*PointsPerAxis*PointsPerAxis + y*PointsPerAxis + x;
}

float3 interpolateVerts(float4 v1, float4 v2) 
{
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz-v1.xyz);
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{ 
    if( id.x >= PointsPerAxis-1 || id.y >= PointsPerAxis-1 || id.z >= PointsPerAxis-1 )
    {
        return;
    }
    
    //Get 8 corner points of Cube
    float4 cornerPoints[8] = 
    {
        Points[GetIndexFromCoordinate(id.x,id.y,id.z)],
        Points[GetIndexFromCoordinate(id.x+1,id.y,id.z)],
        Points[GetIndexFromCoordinate(id.x+1,id.y,id.z+1)],
        Points[GetIndexFromCoordinate(id.x,id.y,id.z+1)],
        
        Points[GetIndexFromCoordinate(id.x,id.y+1,id.z)],
        Points[GetIndexFromCoordinate(id.x+1,id.y+1,id.z)],
        Points[GetIndexFromCoordinate(id.x+1,id.y+1,id.z+1)],
        Points[GetIndexFromCoordinate(id.x,id.y+1,id.z+1)]
    }; 
    
    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cornerPoints[0].w < isoLevel) 
    {
        cubeIndex |= 1;
    }
    if (cornerPoints[1].w < isoLevel) 
    {
        cubeIndex |= 2;
    }
    if (cornerPoints[2].w < isoLevel) 
    {
        cubeIndex |= 4;
    }   
    if (cornerPoints[3].w < isoLevel) 
    {
        cubeIndex |= 8;
    }
    if (cornerPoints[4].w < isoLevel) 
    {
        cubeIndex |= 16;
    }
    if (cornerPoints[5].w < isoLevel) 
    {
        cubeIndex |= 32;
    }
    if (cornerPoints[6].w < isoLevel) 
    {
        cubeIndex |= 64;
    }
    if (cornerPoints[7].w < isoLevel) 
    {
        cubeIndex |= 128;
    }
    
    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i +=3) 
    {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i+1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i+1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i+2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i+2]];

        Triangle tri;
        tri.Vertex1 = interpolateVerts(cornerPoints[a2], cornerPoints[b2]);
        tri.Vertex2 = interpolateVerts(cornerPoints[a1], cornerPoints[b1]);
        tri.Vertex3 = interpolateVerts(cornerPoints[a0], cornerPoints[b0]);
        Triangles.Append(tri);
    }
}
